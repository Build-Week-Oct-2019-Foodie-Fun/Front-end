{"version":3,"sources":["components/styles/AppStyles.js","components/styles/Buttons.js","components/styles/Divs.js","components/welcome/WelcomePage.js","components/signIn/SignInPage.js","components/createAccount/CreateAccountPage.js","App.js","serviceWorker.js","index.js"],"names":["FoodH1","styled","h1","SignInH1","FoodTag","div","FoodHeader","header","FoodApp","CreatAccBtn","button","SignInBtn","BtnDiv","Welcome","props","to","FormikSignIn","withFormik","mapPropsToValues","email","password","validationSchema","Yup","shape","required","errors","touched","values","status","type","name","placeholder","style","fontSize","className","color","textDecoration","FormikCreateAcc","username","userName","password2","oneOf","App","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6fa8329b.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nexport const FoodH1 = styled.h1`\n  @import url(\"https://fonts.googleapis.com/css?family=Josefin+Sans&display=swap\");\n  font-family: \"Josefin Sans\", sans-serif;\n  color: #ffdd67;\n  font-weight: bold;\n  font-size: 7.2rem;\n`;\n\nexport const SignInH1 = styled.h1`\n  @import url(\"https://fonts.googleapis.com/css?family=Lato&display=swap\");\n  font-family: \"Lato\", sans-serif;\n  font-size: 6rem;\n  color: white;\n`;\n\nexport const FoodTag = styled.div`\n  width: 50%;\n  font-size: 1.6rem;\n`;\n\nexport const FoodHeader = styled.header`\n  background-color: #282c34;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: 2.1rem;\n  color: white;\n`;\n\nexport const FoodApp = styled.div`\n  background-color: #282c34;\n  text-align: center;\n  min-height: 100vh;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nexport const CreatAccBtn = styled.button`\n  background: #313036;\n  border: 1.5px solid #ffdd67;\n  box-sizing: border-box;\n  border-radius: 4px;\n  margin-top: 2rem;\n  font-size: 1.6rem;\n  width: 20rem;\n  color: white;\n`;\n\nexport const SignInBtn = styled.button`\n  background: #ffdd67;\n  border-radius: 4px;\n\n  font-size: 1.6rem;\n  width: 20rem;\n  margin-top: 2rem;\n`;","import React from \"react\";\nimport styled from \"styled-components\";\n\n\nexport const BtnDiv = styled.div`\n  @import url(\"https://fonts.googleapis.com/css?family=Lato&display=swap\");\n  font-family: \"Lato\", sans-serif;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  color: white;\n`;\n\nexport const ImgDiv = styled.div`\nborder: 1px solid red;\nwidth: 54%;\n`;\n\nexport const NavDiv = styled.div`\ndisplay: Flex;\n`;\n\nexport const LeftDiv = styled.div`\nwidth: 46%;\n`;","import React from \"react\";\nimport {Link} from 'react-router-dom';\nimport { SignInBtn, CreatAccBtn } from \"../styles/Buttons\";\nimport { FoodHeader, FoodTag, FoodH1 } from \"../styles/AppStyles\";\nimport { BtnDiv } from \"../styles/Divs\";\n\nconst Welcome = props => {\n  return (\n    <>\n      <FoodHeader>\n        <FoodH1>FoodieFun</FoodH1>\n        <FoodTag>\n          <p>\n            A place for foodies to share and rate their favorite spots, dishes,\n            and overall dining experience\n          </p>\n        </FoodTag>\n      </FoodHeader>\n      <BtnDiv>\n        <Link to={'/signin'}><SignInBtn>Sign In</SignInBtn></Link>\n        <Link to={'/createAccount'}><CreatAccBtn> Create Account</CreatAccBtn></Link>\n        <p>Just Browsing -></p>\n      </BtnDiv>\n    </>\n  );\n};\n\n// const BtnDiv = styled.div`\n//   display: flex;\n//   flex-direction: column;\n//   align-items: center;\n//   justify-content: center;\n//   color: white;\n// `;\n\n// const SignIn = styled.button`\n//   background: #ffdd67;\n//   border-radius: 4px;\n\n//   font-size: 1.6rem;\n//   width: 20rem;\n//   margin-top: 5rem;\n// `;\n\n// const CreatAcc = styled.button`\n//   background: #313036;\n//   border: 1.5px solid #ffdd67;\n//   box-sizing: border-box;\n//   border-radius: 4px;\n//   margin-top: 2rem;\n//   font-size: 1.6rem;\n//   width: 20rem;\n//   color: white;\n// `;\nexport default Welcome;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Form, Field, withFormik, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\n\nimport { SignInBtn } from \"../styles/Buttons\";\nimport { BtnDiv } from \"../styles/Divs\";\nimport { FbIcon, GoogleIcon, vectorStyle } from \"../vectors/Vectors\";\nimport { SignInH1 } from \"../styles/AppStyles\";\n\nconst SignIn = ({ errors, touched, values, status }) => {\n  return (\n    <div>\n      <SignInH1>Sign In</SignInH1>\n      \n\n      <Form>\n        <BtnDiv>\n          <br></br>\n          <Field\n            type=\"email\"\n            name=\"email\"\n            placeholder=\"Email\"\n            style={{ fontSize: \"1.5rem\" }}\n          />\n          {touched.email && errors.email && (\n            <p className=\"error\">{errors.email}</p>\n          )}\n          <br></br>\n          <Field\n            type=\"password\"\n            name=\"password\"\n            placeholder=\"Password\"\n            style={{ fontSize: \"1.5rem\" }}\n          />\n          {touched.password && errors.password && (\n            <p className=\"error\">{errors.password}</p>\n          )}\n          <br></br>\n          <Link to={\"\"}>\n            <SignInBtn>Sign In</SignInBtn>\n          </Link>\n          <br></br>\n          <Link to={'/createAccount'} style={{ color: \"white\", textDecoration: 'none' }}><p>Forgot Password?</p></Link>\n        </BtnDiv>\n      </Form>\n    </div>\n  );\n};\n\nconst FormikSignIn = withFormik({\n  mapPropsToValues({email, password}) {\n    return {\n      email: email || \"\",\n      password: password || \"\"\n    };\n  },\n\n  validationSchema: Yup.object().shape({\n    email: Yup.string().required(\"Please enter and Email\"),\n    password: Yup.string().required(\"Enter a password\")\n  })\n\n  // handleSubmit(values, {setStatus}){\n  //   axios\n  //     .post('https://reqres.in/api/users', values)\n  //     .then(res =>{\n  //       setStatus(res.data);\n  //       console.log(res);\n  //     })\n  //     .catch(err=> console.log(err.response));\n  // }\n})(SignIn);\n\nexport default FormikSignIn;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Form, Field, withFormik, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\n\nimport { SignInBtn } from \"../styles/Buttons\";\nimport { BtnDiv } from \"../styles/Divs\";\nimport { SignInH1 } from \"../styles/AppStyles\";\n\nconst CreateAccount = ({ errors, touched, values, status }) => {\n  return (\n    <div>\n      <SignInH1>Create Account</SignInH1>\n      \n      <Form >\n        <BtnDiv >\n          <br></br>\n          <Field type=\"text\" name=\"userName\" placeholder=\"User Name\" style={{ fontSize: \"1.5rem\" }} />\n          {touched.userName && errors.userName && (\n            <p className=\"error\">{errors.userName}</p>\n          )}\n          <br></br>\n          <Field type=\"email\" name=\"email\" placeholder=\"Email\" style={{ fontSize: \"1.5rem\" }} />\n          {touched.email && errors.email && (\n            <p className=\"error\">{errors.email}</p>\n          )}\n          <br></br>\n          <Field type=\"password\" name=\"password\" placeholder=\"Password\" style={{ fontSize: \"1.5rem\" }}/>\n          {touched.password && errors.password && (\n            <p className=\"error\">{errors.password}</p>\n          )}\n          <br></br>\n          <Field type=\"password\" name=\"password2\" placeholder=\"Verify Password\" style={{ fontSize: \"1.5rem\" }}/>\n          {touched.password2 && errors.password2 && (\n            <p className=\"error\">{errors.password2}</p>\n          )}\n\n          <Link>\n            <SignInBtn>Create</SignInBtn>\n          </Link>\n          <Link to={'/'}><p style={{ color: \"white\" }}>Never mind</p></Link>\n        </BtnDiv>\n      </Form>\n    </div>\n  );\n};\n\nconst FormikCreateAcc = withFormik({\n  mapPropsToValues({ userName, email, password, password2 }) {\n    return {\n      username: userName || \"\",\n      email: email || \"\",\n      password: password || \"\",\n      password2: password2 || \"\"\n    };\n  },\n\n  validationSchema: Yup.object().shape({\n    username: Yup.string().required(\"A name is required\"),\n    email: Yup.string().required(\"Please enter and Email\"),\n    password: Yup.string().required(\"Enter a password\"),\n    password2: Yup.string()\n      .oneOf([Yup.ref('password'), 'Passwords do not match'])\n      .required(\"Enter a password\")\n  })\n\n  // handleSubmit(values, {setStatus}){\n  //   axios\n  //     .post('https://reqres.in/api/users', values)\n  //     .then(res =>{\n  //       setStatus(res.data);\n  //       console.log(res);\n  //     })\n  //     .catch(err=> console.log(err.response));\n  // }\n})(CreateAccount);\n\nexport default FormikCreateAcc;\n","import React from \"react\";\nimport \"./App.css\";\nimport {FoodApp, FoodHeader} from './components/styles/AppStyles'\nimport {Route} from 'react-router-dom';\n\nimport Welcome from './components/welcome/WelcomePage';\nimport SignIn from './components/signIn/SignInPage';\nimport CreateAccount from './components/createAccount/CreateAccountPage';\n\n\n\n\nfunction App() {\n  return (\n    <FoodApp>\n      <FoodHeader></FoodHeader>\n      <Route exact path=\"/\" render = {props => <Welcome {...props} />} />\n      <Route path=\"/signin\" render = {props => <SignIn {...props} />}/>\n      <Route path=\"/createAccount\" render = {props => <CreateAccount {...props} />}/>      \n    </FoodApp>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n    <Router><App /></Router>, \n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}